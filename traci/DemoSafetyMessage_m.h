//
// Generated file, do not edit! Created by nedtool 5.7 from veins/modules/messages/DemoSafetyMessage.msg.
//

#ifndef __VEINS_DEMOSAFETYMESSAGE_M_H
#define __VEINS_DEMOSAFETYMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class DemoSafetyMessage;
class EmergencyVehicleMessage;
class TrafficLightChangeMeessage;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>veins/modules/messages/DemoSafetyMessage.msg:29</tt> by nedtool.
 * <pre>
 * packet DemoSafetyMessage extends BaseFrame1609_4
 * {
 *     int senderAddress;
 *     Coord senderPos;
 *     //double senderSpeed;
 *     int psid;
 *     int channelNumber;
 *     string senderId;
 *     Coord senderSpeed;
 * }
 * </pre>
 */
class VEINS_API DemoSafetyMessage : public ::veins::BaseFrame1609_4
{
  protected:
    int senderAddress = 0;
    Coord senderPos;
    int psid = 0;
    int channelNumber = 0;
    omnetpp::opp_string senderId;
    Coord senderSpeed;

  private:
    void copy(const DemoSafetyMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DemoSafetyMessage&);

  public:
    DemoSafetyMessage(const char *name=nullptr, short kind=0);
    DemoSafetyMessage(const DemoSafetyMessage& other);
    virtual ~DemoSafetyMessage();
    DemoSafetyMessage& operator=(const DemoSafetyMessage& other);
    virtual DemoSafetyMessage *dup() const override {return new DemoSafetyMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSenderAddress() const;
    virtual void setSenderAddress(int senderAddress);
    virtual const Coord& getSenderPos() const;
    virtual Coord& getSenderPosForUpdate() { return const_cast<Coord&>(const_cast<DemoSafetyMessage*>(this)->getSenderPos());}
    virtual void setSenderPos(const Coord& senderPos);
    virtual int getPsid() const;
    virtual void setPsid(int psid);
    virtual int getChannelNumber() const;
    virtual void setChannelNumber(int channelNumber);
    virtual const char * getSenderId() const;
    virtual void setSenderId(const char * senderId);
    virtual const Coord& getSenderSpeed() const;
    virtual Coord& getSenderSpeedForUpdate() { return const_cast<Coord&>(const_cast<DemoSafetyMessage*>(this)->getSenderSpeed());}
    virtual void setSenderSpeed(const Coord& senderSpeed);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DemoSafetyMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DemoSafetyMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/modules/messages/DemoSafetyMessage.msg:39</tt> by nedtool.
 * <pre>
 * packet EmergencyVehicleMessage extends BaseFrame1609_4
 * {
 *     string vehicleId;
 *     double latitude;
 *     double longitude;
 *     double speed;
 *     string direction;
 *     double timestamp;
 * }
 * </pre>
 */
class VEINS_API EmergencyVehicleMessage : public ::veins::BaseFrame1609_4
{
  protected:
    omnetpp::opp_string vehicleId;
    double latitude = 0;
    double longitude = 0;
    double speed = 0;
    omnetpp::opp_string direction;
    double timestamp = 0;

  private:
    void copy(const EmergencyVehicleMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EmergencyVehicleMessage&);

  public:
    EmergencyVehicleMessage(const char *name=nullptr, short kind=0);
    EmergencyVehicleMessage(const EmergencyVehicleMessage& other);
    virtual ~EmergencyVehicleMessage();
    EmergencyVehicleMessage& operator=(const EmergencyVehicleMessage& other);
    virtual EmergencyVehicleMessage *dup() const override {return new EmergencyVehicleMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getVehicleId() const;
    virtual void setVehicleId(const char * vehicleId);
    virtual double getLatitude() const;
    virtual void setLatitude(double latitude);
    virtual double getLongitude() const;
    virtual void setLongitude(double longitude);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual const char * getDirection() const;
    virtual void setDirection(const char * direction);
    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EmergencyVehicleMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EmergencyVehicleMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/modules/messages/DemoSafetyMessage.msg:48</tt> by nedtool.
 * <pre>
 * packet TrafficLightChangeMeessage extends BaseFrame1609_4
 * {
 *     string ambulanceId;
 *     double latitude;
 *     double longitude;
 *     string edge;
 *     string lane;
 *     double speed;
 *     double timestamp;
 *     int greenPhaseIndex;
 * }
 * </pre>
 */
class VEINS_API TrafficLightChangeMeessage : public ::veins::BaseFrame1609_4
{
  protected:
    omnetpp::opp_string ambulanceId;
    double latitude = 0;
    double longitude = 0;
    omnetpp::opp_string edge;
    omnetpp::opp_string lane;
    double speed = 0;
    double timestamp = 0;
    int greenPhaseIndex = 0;

  private:
    void copy(const TrafficLightChangeMeessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TrafficLightChangeMeessage&);

  public:
    TrafficLightChangeMeessage(const char *name=nullptr, short kind=0);
    TrafficLightChangeMeessage(const TrafficLightChangeMeessage& other);
    virtual ~TrafficLightChangeMeessage();
    TrafficLightChangeMeessage& operator=(const TrafficLightChangeMeessage& other);
    virtual TrafficLightChangeMeessage *dup() const override {return new TrafficLightChangeMeessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getAmbulanceId() const;
    virtual void setAmbulanceId(const char * ambulanceId);
    virtual double getLatitude() const;
    virtual void setLatitude(double latitude);
    virtual double getLongitude() const;
    virtual void setLongitude(double longitude);
    virtual const char * getEdge() const;
    virtual void setEdge(const char * edge);
    virtual const char * getLane() const;
    virtual void setLane(const char * lane);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
    virtual int getGreenPhaseIndex() const;
    virtual void setGreenPhaseIndex(int greenPhaseIndex);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TrafficLightChangeMeessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TrafficLightChangeMeessage& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_DEMOSAFETYMESSAGE_M_H

